{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { BasketActionEnum } from \"../../types/reducer/baskeReducer.type\";\nconst defaultState = {\n  basketPizza: [],\n  allPrice: 0\n};\nexport const basketReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case BasketActionEnum.ADD_BASKET_ITEM:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        basketPizza: [...state.basketPizza, _objectSpread(_objectSpread({}, action.payload), {}, {\n          count: 1,\n          countPrice: action.payload.price\n        })]\n      });\n      localStorage.setItem('pizzaBasket', JSON.stringify(state.basketPizza));\n      return state;\n\n    case BasketActionEnum.REMOVE_BASKET_ITEM:\n      const newPizza = state.basketPizza.filter(pizza => pizza._id !== action.payload);\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        basketPizza: newPizza\n      });\n      localStorage.setItem('pizzaBasket', JSON.stringify(state.basketPizza));\n      return state;\n\n    case BasketActionEnum.SET_ALLPRICE:\n      const allPrice = state.basketPizza.reduce((prev, item) => prev += item.countPrice, 0);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPrice\n      });\n\n    case BasketActionEnum.SET_COUNTPRICE:\n      const newBasketPizza = state.basketPizza.map(item => {\n        if (item._id === action.payload.id) {\n          item.countPrice = action.payload.count * item.price;\n          item.count = action.payload.count;\n        }\n\n        return item;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        basketPizza: newBasketPizza,\n        allPrice: newBasketPizza.reduce((prev, item) => prev += item.countPrice, 0)\n      });\n\n    case BasketActionEnum.CLEAR_BASKET:\n      localStorage.removeItem('pizzaBasket');\n      return {\n        basketPizza: [],\n        allPrice: 0\n      };\n\n    default:\n      return state;\n  }\n};\nexport const addPizzaToBasket = payload => ({\n  type: BasketActionEnum.ADD_BASKET_ITEM,\n  payload\n});\nexport const removePizzaToBasket = payload => ({\n  type: BasketActionEnum.REMOVE_BASKET_ITEM,\n  payload\n});\nexport const setAllPrice = () => ({\n  type: BasketActionEnum.SET_ALLPRICE\n});\nexport const setCountPrice = payload => ({\n  type: BasketActionEnum.SET_COUNTPRICE,\n  payload\n});\nexport const clearBasket = () => ({\n  type: BasketActionEnum.CLEAR_BASKET\n});","map":{"version":3,"sources":["C:/Users/Руслан/Desktop/NestAndNextShopPizza/frontend/store/reducer/basketReducer.ts"],"names":["BasketActionEnum","defaultState","basketPizza","allPrice","basketReducer","state","action","type","ADD_BASKET_ITEM","payload","count","countPrice","price","localStorage","setItem","JSON","stringify","REMOVE_BASKET_ITEM","newPizza","filter","pizza","_id","SET_ALLPRICE","reduce","prev","item","SET_COUNTPRICE","newBasketPizza","map","id","CLEAR_BASKET","removeItem","addPizzaToBasket","removePizzaToBasket","setAllPrice","setCountPrice","clearBasket"],"mappings":"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","sourcesContent":["import {\r\n    BasketActionEnum,\r\n    TBasketAction,\r\n    TBasketState,\r\n    AddBasket,\r\n    RemoveBasket,\r\n    SetAllPrice,\r\n    SetCountPrice,\r\n    TPayloadSecCountPrice,\r\n    ClearBasket,\r\n    TPizzaBasket\r\n} from \"../../types/reducer/baskeReducer.type\"\r\nimport { TPizza } from \"../../types/pizza.type\"\r\n\r\nconst defaultState: TBasketState = {\r\n    basketPizza: [],\r\n    allPrice: 0\r\n}\r\n\r\nexport const basketReducer = (state = defaultState, action: TBasketAction): TBasketState => {\r\n    switch(action.type){\r\n        case BasketActionEnum.ADD_BASKET_ITEM:\r\n            state = {...state, basketPizza: [...state.basketPizza, {...action.payload, count: 1, countPrice: action.payload.price}]}\r\n            localStorage.setItem('pizzaBasket', JSON.stringify(state.basketPizza))\r\n            return state\r\n        case BasketActionEnum.REMOVE_BASKET_ITEM:\r\n            const newPizza: Array<TPizzaBasket> = state.basketPizza.filter(pizza => pizza._id !== action.payload )\r\n            state = {...state, basketPizza: newPizza }\r\n            localStorage.setItem('pizzaBasket', JSON.stringify(state.basketPizza))\r\n            return state\r\n        case BasketActionEnum.SET_ALLPRICE:\r\n            const allPrice = state.basketPizza.reduce((prev, item) => prev += item.countPrice, 0)\r\n            return {...state, allPrice}\r\n        case BasketActionEnum.SET_COUNTPRICE:\r\n            const newBasketPizza = state.basketPizza.map((item) => {\r\n                if(item._id === action.payload.id){\r\n                    item.countPrice = action.payload.count * item.price\r\n                    item.count = action.payload.count\r\n                }\r\n                return item\r\n            })\r\n            return { ...state, basketPizza: newBasketPizza, allPrice: newBasketPizza.reduce((prev, item) => prev += item.countPrice, 0)}\r\n        case BasketActionEnum.CLEAR_BASKET:\r\n            localStorage.removeItem('pizzaBasket')\r\n            return {basketPizza: [], allPrice: 0}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPizzaToBasket = (payload: TPizza): AddBasket => ({ type: BasketActionEnum.ADD_BASKET_ITEM, payload })\r\nexport const removePizzaToBasket = (payload: string): RemoveBasket => ({ type: BasketActionEnum.REMOVE_BASKET_ITEM, payload })\r\nexport const setAllPrice = (): SetAllPrice => ({ type: BasketActionEnum.SET_ALLPRICE })\r\nexport const setCountPrice = (payload: TPayloadSecCountPrice): SetCountPrice => ({ type: BasketActionEnum.SET_COUNTPRICE, payload })\r\nexport const clearBasket = (): ClearBasket => ({ type: BasketActionEnum.CLEAR_BASKET }) "]},"metadata":{},"sourceType":"module"}