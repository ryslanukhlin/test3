{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\u0420\\u0443\\u0441\\u043B\\u0430\\u043D\\\\Desktop\\\\NestAndNextShopPizza\\\\frontend\\\\component\\\\Auth\\\\Login.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Button, Checkbox, FormControlLabel, Grid, TextField, Typography } from '@material-ui/core';\nimport style from '../../style/auth.module.scss';\nimport getConfig from 'next/config';\nimport { useSnackbar } from 'notistack';\nimport { useAction } from '../../hooks/useAction';\nimport GoogleLogin from \"react-google-login\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\n\nconst LoginPage = ({\n  goRegister,\n  handleClose\n}) => {\n  const [remMe, setRemMe] = React.useState(false);\n  const {\n    LoginLocal,\n    LoginGoogle,\n    setUserLocal\n  } = useAction();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const [loginForm, setLoginForm] = React.useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  const changeForm = e => {\n    setLoginForm(_objectSpread(_objectSpread({}, loginForm), {}, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const login = async () => {\n    const response = await fetch(publicRuntimeConfig.backendUri + \"/auth\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(_objectSpread({}, loginForm))\n    });\n\n    if (response.status !== 201) {\n      enqueueSnackbar(\"invalid password or email\", {\n        variant: \"error\"\n      });\n    } else {\n      const data = await response.json();\n      LoginLocal(data.access_token);\n      handleClose();\n      if (remMe) localStorage.setItem('token', data.access_token);\n      setUser(data.access_token);\n    }\n  };\n\n  const setUser = async token => {\n    const response = await fetch(publicRuntimeConfig.backendUri + \"/auth\", {\n      method: \"GET\",\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n    setUserLocal(await response.json());\n  };\n\n  const responseSuccessGoogle = async resolve => {\n    const {\n      email,\n      name,\n      googleId,\n      imageUrl\n    } = resolve.profileObj;\n    const response = await fetch(publicRuntimeConfig.backendUri + '/users/google', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        googleId,\n        nicname: name,\n        icon: imageUrl\n      })\n    });\n    LoginGoogle(await response.json());\n    handleClose();\n  };\n\n  const responseErrorGoogle = () => {\n    enqueueSnackbar(\"не удалось войти в гугл\", {\n      variant: \"error\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"\\u0412\\u0445\\u043E\\u0434 \\u043D\\u0430 FamulyPizza\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      value: loginForm.email,\n      onChange: changeForm,\n      size: \"small\",\n      variant: \"outlined\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      id: \"email\",\n      label: \"\\u041F\\u043E\\u0447\\u0442\\u0430\",\n      name: \"email\",\n      autoComplete: \"email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      value: loginForm.password,\n      onChange: changeForm,\n      size: \"small\",\n      variant: \"outlined\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      name: \"password\",\n      label: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n      type: \"password\",\n      id: \"password\",\n      autoComplete: \"current-password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      value: remMe,\n      onChange: setRemMe.bind(null, prev => !prev),\n      control: /*#__PURE__*/_jsxDEV(Checkbox, {\n        value: \"remember\",\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 26\n      }, this),\n      label: \"\\u0417\\u0430\\u043F\\u043E\\u043C\\u043D\\u0438\\u0442\\u044C \\u043C\\u0435\\u043D\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: login,\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: style.modalFooter,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          className: style.customLink,\n          variant: \"inherit\",\n          onClick: goRegister,\n          children: \"\\u0423 \\u0432\\u0430\\u0441 \\u043D\\u0435\\u0442 \\u0443\\u0447\\u0435\\u0442\\u043D\\u043E\\u0439 \\u0437\\u0430\\u043F\\u0438\\u0441\\u0438? \\u0417\\u0430\\u0440\\u0435\\u0433\\u0435\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      className: style.auth__google,\n      clientId: \"1039089113540-k5pkcpnsa4eq6446risiup8sh6cn418g.apps.googleusercontent.com\",\n      buttonText: \"\\u0412\\u043E\\u0439\\u0442\\u0438 \\u0447\\u0435\\u0440\\u0435\\u0437 google\",\n      onSuccess: responseSuccessGoogle,\n      onFailure: responseErrorGoogle,\n      cookiePolicy: 'single_host_origin'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\nexport default LoginPage;","map":{"version":3,"sources":["C:/Users/Руслан/Desktop/NestAndNextShopPizza/frontend/component/Auth/Login.tsx"],"names":["React","Button","Checkbox","FormControlLabel","Grid","TextField","Typography","style","getConfig","useSnackbar","useAction","GoogleLogin","publicRuntimeConfig","LoginPage","goRegister","handleClose","remMe","setRemMe","useState","LoginLocal","LoginGoogle","setUserLocal","enqueueSnackbar","loginForm","setLoginForm","email","password","changeForm","e","target","name","value","login","response","fetch","backendUri","method","headers","body","JSON","stringify","status","variant","data","json","access_token","localStorage","setItem","setUser","token","responseSuccessGoogle","resolve","googleId","imageUrl","profileObj","nicname","icon","responseErrorGoogle","bind","prev","modalFooter","customLink","auth__google"],"mappings":"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","sourcesContent":["import React, { MouseEventHandler } from 'react';\r\nimport { Button, Checkbox, FormControlLabel, Grid, TextField, Typography } from '@material-ui/core';\r\nimport style from '../../style/auth.module.scss';\r\nimport { TLoginForm } from '../../types/form/login-form.type';\r\nimport getConfig from 'next/config'\r\nimport { useSnackbar } from 'notistack';\r\nimport { useAction } from '../../hooks/useAction';\r\nimport GoogleLogin, { GoogleLoginResponse } from \"react-google-login\";\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\n\r\nconst LoginPage: React.FC<{ goRegister: MouseEventHandler, handleClose: Function}> = ({ goRegister, handleClose }) => {\r\n    const [remMe, setRemMe] = React.useState<boolean>(false);\r\n    const { LoginLocal, LoginGoogle, setUserLocal } = useAction();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [loginForm, setLoginForm] = React.useState<TLoginForm>({\r\n        email: \"\",\r\n        password: \"\"\r\n    });\r\n\r\n    const changeForm = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setLoginForm({...loginForm, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    const login = async (): Promise<void> => {\r\n        const response = await fetch(publicRuntimeConfig.backendUri + \"/auth\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({...loginForm})\r\n        });\r\n        if(response.status !== 201){\r\n            enqueueSnackbar(\"invalid password or email\", { variant: \"error\" });\r\n        } else {\r\n            const data = await response.json()\r\n            LoginLocal(data.access_token)\r\n            handleClose()\r\n            if (remMe) localStorage.setItem('token', data.access_token);\r\n            setUser(data.access_token)\r\n        }\r\n    }\r\n\r\n    const setUser = async (token: string) => {\r\n        const response = await fetch(publicRuntimeConfig.backendUri + \"/auth\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token,\r\n            }\r\n        })\r\n        setUserLocal(await response.json());\r\n    }\r\n\r\n    const responseSuccessGoogle = async (resolve: GoogleLoginResponse): Promise<void> => {\r\n        const {email, name, googleId, imageUrl} = resolve.profileObj\r\n        const response = await fetch(publicRuntimeConfig.backendUri + '/users/google', {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({email, googleId, nicname: name, icon: imageUrl})\r\n        })\r\n        LoginGoogle(await response.json())\r\n        handleClose()\r\n    }\r\n    \r\n    const responseErrorGoogle = (): void => {\r\n        enqueueSnackbar(\"не удалось войти в гугл\", { variant: \"error\" });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h6\">Вход на FamulyPizza</Typography>\r\n            <TextField\r\n                value={loginForm.email}\r\n                onChange={changeForm}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Почта\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n            />\r\n            <TextField\r\n                value={loginForm.password}\r\n                onChange={changeForm}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Пароль\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n            />\r\n            <FormControlLabel\r\n                value={remMe}\r\n                onChange={setRemMe.bind(null, prev => !prev)}\r\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                label=\"Запомнить меня\"\r\n            />\r\n            <Button\r\n                onClick={login}\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                Войти\r\n            </Button>\r\n            <Grid container className={style.modalFooter}>\r\n                <Grid item xs />\r\n                <Grid item>\r\n                    <Typography className={style.customLink} variant=\"inherit\" onClick={goRegister}>\r\n                        У вас нет учетной записи? Зарегестрироваться\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <GoogleLogin\r\n                className={style.auth__google}\r\n                clientId=\"1039089113540-k5pkcpnsa4eq6446risiup8sh6cn418g.apps.googleusercontent.com\"\r\n                buttonText=\"Войти через google\"\r\n                onSuccess={responseSuccessGoogle}\r\n                onFailure={responseErrorGoogle}\r\n                cookiePolicy={'single_host_origin'}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage\r\n"]},"metadata":{},"sourceType":"module"}