{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Button, Checkbox, FormControlLabel, Grid, TextField, Typography } from '@material-ui/core';\nimport style from '../../style/auth.module.scss';\nimport getConfig from 'next/config';\nimport { useSnackbar } from 'notistack';\nimport { useAction } from '../../hooks/useAction';\nimport GoogleLogin from \"react-google-login\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\n\nconst LoginPage = ({\n  goRegister,\n  handleClose\n}) => {\n  const [remMe, setRemMe] = React.useState(false);\n  const {\n    LoginLocal,\n    LoginGoogle,\n    setUserLocal\n  } = useAction();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const [loginForm, setLoginForm] = React.useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  const changeForm = e => {\n    setLoginForm(_objectSpread(_objectSpread({}, loginForm), {}, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const login = async () => {\n    const response = await fetch(publicRuntimeConfig.backendUri + \"/auth\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(_objectSpread({}, loginForm))\n    });\n\n    if (response.status !== 201) {\n      enqueueSnackbar(\"invalid password or email\", {\n        variant: \"error\"\n      });\n    } else {\n      const data = await response.json();\n      LoginLocal(data.access_token);\n      handleClose();\n      if (remMe) localStorage.setItem('token', data.access_token);\n      setUser(data.access_token);\n    }\n  };\n\n  const setUser = async token => {\n    const response = await fetch(publicRuntimeConfig.backendUri + \"/auth\", {\n      method: \"GET\",\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n    setUserLocal(await response.json());\n  };\n\n  const responseSuccessGoogle = async resolve => {\n    const {\n      email,\n      name,\n      googleId,\n      imageUrl\n    } = resolve.profileObj;\n    const response = await fetch(publicRuntimeConfig.backendUri + '/users/google', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        googleId,\n        nicname: name,\n        icon: imageUrl\n      })\n    });\n    LoginGoogle(await response.json());\n    handleClose();\n  };\n\n  const responseErrorGoogle = () => {\n    enqueueSnackbar(\"не удалось войти в гугл\", {\n      variant: \"error\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(Typography, {\n      variant: \"h6\",\n      children: \"\\u0412\\u0445\\u043E\\u0434 \\u043D\\u0430 FamulyPizza\"\n    }), /*#__PURE__*/_jsx(TextField, {\n      value: loginForm.email,\n      onChange: changeForm,\n      size: \"small\",\n      variant: \"outlined\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      id: \"email\",\n      label: \"\\u041F\\u043E\\u0447\\u0442\\u0430\",\n      name: \"email\",\n      autoComplete: \"email\"\n    }), /*#__PURE__*/_jsx(TextField, {\n      value: loginForm.password,\n      onChange: changeForm,\n      size: \"small\",\n      variant: \"outlined\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      name: \"password\",\n      label: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n      type: \"password\",\n      id: \"password\",\n      autoComplete: \"current-password\"\n    }), /*#__PURE__*/_jsx(FormControlLabel, {\n      value: remMe,\n      onChange: setRemMe.bind(null, prev => !prev),\n      control: /*#__PURE__*/_jsx(Checkbox, {\n        value: \"remember\",\n        color: \"primary\"\n      }),\n      label: \"\\u0417\\u0430\\u043F\\u043E\\u043C\\u043D\\u0438\\u0442\\u044C \\u043C\\u0435\\u043D\\u044F\"\n    }), /*#__PURE__*/_jsx(Button, {\n      onClick: login,\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n    }), /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      className: style.modalFooter,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: true\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsx(Typography, {\n          className: style.customLink,\n          variant: \"inherit\",\n          onClick: goRegister,\n          children: \"\\u0423 \\u0432\\u0430\\u0441 \\u043D\\u0435\\u0442 \\u0443\\u0447\\u0435\\u0442\\u043D\\u043E\\u0439 \\u0437\\u0430\\u043F\\u0438\\u0441\\u0438? \\u0417\\u0430\\u0440\\u0435\\u0433\\u0435\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\"\n        })\n      })]\n    }), /*#__PURE__*/_jsx(GoogleLogin, {\n      className: style.auth__google,\n      clientId: \"1039089113540-k5pkcpnsa4eq6446risiup8sh6cn418g.apps.googleusercontent.com\",\n      buttonText: \"\\u0412\\u043E\\u0439\\u0442\\u0438 \\u0447\\u0435\\u0440\\u0435\\u0437 google\",\n      onSuccess: responseSuccessGoogle,\n      onFailure: responseErrorGoogle,\n      cookiePolicy: 'single_host_origin'\n    })]\n  });\n};\n\nexport default LoginPage;","map":null,"metadata":{},"sourceType":"module"}