{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { Container } from \"@material-ui/core\";\nimport CommentForm from \"../../component/CommentForm\";\nimport style from \"../../style/pizzaItem.module.scss\";\nimport ItemPizzaId from \"../../component/ItemPizzaId\";\nimport io from \"socket.io-client\";\nimport Comments from \"../../component/Comments\";\nimport { useTypedSelector } from \"../../hooks/useTypeSelector\";\nimport { useSnackbar } from 'notistack';\nimport getConfig from \"next/config\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\n\nconst PagesPizza = ({\n  data\n}) => {\n  const {\n    user,\n    isAuth\n  } = useTypedSelector(state => state.userReducer);\n  const [pizza, setPizza] = React.useState(data);\n  const socketRef = React.useRef();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  React.useEffect(() => {\n    if (false) {\n      socketRef.current = io(publicRuntimeConfig.backendUri);\n      socketRef.current.emit(\"COMMENT:ROOM\", data._id);\n      socketRef.current.on(\"COMMENT:REFRESH\", product => setPizza(product));\n    }\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, []);\n\n  const addComment = (text, e) => {\n    if (!isAuth) return enqueueSnackbar(\"Чтобы добавить кометарий вы должны войти\", {\n      variant: \"error\"\n    });\n    if (text === \"\") return enqueueSnackbar(\"Введите что-нибудь\", {\n      variant: \"error\"\n    });\n    socketRef.current.emit('COMMENT:ADD', {\n      text,\n      userId: user._id,\n      productId: data._id\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    maxWidth: \"lg\",\n    children: [/*#__PURE__*/_jsx(ItemPizzaId, {\n      data: pizza\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: style.customHr\n    }), /*#__PURE__*/_jsx(CommentForm, {\n      addComment: addComment\n    }), /*#__PURE__*/_jsx(Comments, {\n      comments: pizza.comments\n    })]\n  });\n};\n\nexport const getServerSideProps = async ({\n  params\n}) => {\n  const response = await fetch(`${publicRuntimeConfig.backendUri}/product/${params.id}`);\n  if (response.status !== 200) return {\n    notFound: true\n  };\n  const data = await response.json();\n  return {\n    props: {\n      data\n    }\n  };\n};\nexport default PagesPizza;","map":null,"metadata":{},"sourceType":"module"}