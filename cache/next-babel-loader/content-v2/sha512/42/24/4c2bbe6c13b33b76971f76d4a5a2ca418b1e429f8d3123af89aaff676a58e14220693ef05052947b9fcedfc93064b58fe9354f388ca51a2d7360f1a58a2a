{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { BasketActionEnum } from \"../../types/reducer/baskeReducer.type\";\nconst defaultState = {\n  basketPizza: [],\n  allPrice: 0\n};\nexport const basketReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case BasketActionEnum.ADD_BASKET_ITEM:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        basketPizza: [...state.basketPizza, _objectSpread(_objectSpread({}, action.payload), {}, {\n          count: 1,\n          countPrice: action.payload.price\n        })]\n      });\n      localStorage.setItem('pizzaBasket', JSON.stringify(state.basketPizza));\n      return state;\n\n    case BasketActionEnum.REMOVE_BASKET_ITEM:\n      const newPizza = state.basketPizza.filter(pizza => pizza._id !== action.payload);\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        basketPizza: newPizza\n      });\n      localStorage.setItem('pizzaBasket', JSON.stringify(state.basketPizza));\n      return state;\n\n    case BasketActionEnum.SET_ALLPRICE:\n      const allPrice = state.basketPizza.reduce((prev, item) => prev += item.countPrice, 0);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPrice\n      });\n\n    case BasketActionEnum.SET_COUNTPRICE:\n      const newBasketPizza = state.basketPizza.map(item => {\n        if (item._id === action.payload.id) {\n          item.countPrice = action.payload.count * item.price;\n          item.count = action.payload.count;\n        }\n\n        return item;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        basketPizza: newBasketPizza,\n        allPrice: newBasketPizza.reduce((prev, item) => prev += item.countPrice, 0)\n      });\n\n    case BasketActionEnum.CLEAR_BASKET:\n      localStorage.removeItem('pizzaBasket');\n      return {\n        basketPizza: [],\n        allPrice: 0\n      };\n\n    default:\n      return state;\n  }\n};\nexport const addPizzaToBasket = payload => ({\n  type: BasketActionEnum.ADD_BASKET_ITEM,\n  payload\n});\nexport const removePizzaToBasket = payload => ({\n  type: BasketActionEnum.REMOVE_BASKET_ITEM,\n  payload\n});\nexport const setAllPrice = () => ({\n  type: BasketActionEnum.SET_ALLPRICE\n});\nexport const setCountPrice = payload => ({\n  type: BasketActionEnum.SET_COUNTPRICE,\n  payload\n});\nexport const clearBasket = () => ({\n  type: BasketActionEnum.CLEAR_BASKET\n});","map":null,"metadata":{},"sourceType":"module"}