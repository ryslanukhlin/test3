{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\u0420\\u0443\\u0441\\u043B\\u0430\\u043D\\\\Desktop\\\\NestAndNextShopPizza\\\\frontend\\\\component\\\\Auth\\\\Register.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, Grid, TextField, Typography } from '@material-ui/core';\nimport React from 'react';\nimport style from '../../style/auth.module.scss';\nimport getConfig from 'next/config';\nimport { useSnackbar } from 'notistack';\nconst {\n  publicRuntimeConfig\n} = getConfig();\n\nconst RegisterPage = ({\n  goLogin\n}) => {\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const [registerForm, setRegisterForm] = React.useState({\n    nicname: \"\",\n    email: \"\",\n    password: \"\",\n    repeatPassword: \"\"\n  });\n\n  const changeForm = e => {\n    setRegisterForm(_objectSpread(_objectSpread({}, registerForm), {}, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const register = async () => {\n    if (registerForm.password !== registerForm.repeatPassword) {\n      return enqueueSnackbar('passwords don\\'t match', {\n        variant: \"error\"\n      });\n    }\n\n    const response = await fetch(publicRuntimeConfig.backendUri + \"/users\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(_objectSpread({}, registerForm))\n    });\n\n    if (response.status === 201) {\n      enqueueSnackbar('registration was successful', {\n        variant: \"success\"\n      });\n      let clearForm = registerForm;\n\n      for (let orderItem in registerForm) {\n        clearForm[orderItem] = \"\";\n      }\n\n      setRegisterForm(_objectSpread({}, clearForm));\n    }\n\n    const data = await response.json();\n\n    if (response.status === 400) {\n      data.message.map(err => {\n        enqueueSnackbar(err, {\n          variant: \"error\"\n        });\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F \\u043D\\u0430 FamulyPizza\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      value: registerForm.nicname,\n      onChange: changeForm,\n      size: \"small\",\n      variant: \"outlined\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      label: \"\\u041D\\u0438\\u043A\\u043D\\u0435\\u0439\\u043C\",\n      name: \"nicname\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      value: registerForm.email,\n      onChange: changeForm,\n      size: \"small\",\n      variant: \"outlined\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      label: \"\\u041F\\u043E\\u0447\\u0442\\u0430\",\n      name: \"email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      value: registerForm.password,\n      onChange: changeForm,\n      size: \"small\",\n      variant: \"outlined\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      name: \"password\",\n      label: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n      type: \"password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      value: registerForm.repeatPassword,\n      onChange: changeForm,\n      size: \"small\",\n      variant: \"outlined\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      name: \"repeatPassword\",\n      label: \"\\u041F\\u043E\\u0432\\u0442\\u043E\\u0440\\u0438\\u0442\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n      type: \"password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: register,\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      children: \"\\u0417\\u0430\\u0440\\u0435\\u0433\\u0435\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: style.modalFooter,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          className: style.customLink,\n          variant: \"inherit\",\n          onClick: goLogin,\n          children: \"\\u0412\\u044B \\u0438\\u043C\\u0435\\u0435\\u0442\\u0435 \\u0430\\u043A\\u043A\\u0430\\u0443\\u043D\\u0442? \\u0412\\u043E\\u0439\\u0434\\u0438\\u0442\\u0435\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\nexport default RegisterPage;","map":{"version":3,"sources":["C:/Users/Руслан/Desktop/NestAndNextShopPizza/frontend/component/Auth/Register.tsx"],"names":["Button","Grid","TextField","Typography","React","style","getConfig","useSnackbar","publicRuntimeConfig","RegisterPage","goLogin","enqueueSnackbar","registerForm","setRegisterForm","useState","nicname","email","password","repeatPassword","changeForm","e","target","name","value","register","variant","response","fetch","backendUri","method","headers","body","JSON","stringify","status","clearForm","orderItem","data","json","message","map","err","modalFooter","customLink"],"mappings":"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","sourcesContent":["import { Button, Grid, TextField, Typography } from '@material-ui/core';\r\nimport React, { MouseEventHandler } from 'react';\r\nimport style from '../../style/auth.module.scss';\r\nimport { TRegisterForm } from '../../types/form/register-form.type';\r\nimport getConfig from 'next/config'\r\nimport {SnackbarKey, useSnackbar} from 'notistack';\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\n\r\nconst RegisterPage: React.FC<{ goLogin: MouseEventHandler }> = ({ goLogin }) => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [registerForm, setRegisterForm] = React.useState<TRegisterForm>({\r\n        nicname: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        repeatPassword: \"\"\r\n    })\r\n\r\n    const changeForm = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setRegisterForm({...registerForm, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    const register = async (): Promise<void | SnackbarKey> => {\r\n        if(registerForm.password !== registerForm.repeatPassword) {\r\n            return enqueueSnackbar('passwords don\\'t match', { variant: \"error\" })\r\n        }\r\n        const response = await fetch(publicRuntimeConfig.backendUri + \"/users\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({...registerForm})\r\n        });\r\n\r\n        if(response.status === 201){\r\n            enqueueSnackbar('registration was successful', { variant: \"success\" })\r\n            let clearForm: TRegisterForm = registerForm;\r\n            for(let orderItem in registerForm){\r\n                clearForm[orderItem] = \"\"\r\n            }\r\n            setRegisterForm({...clearForm})\r\n        }\r\n        const data = await response.json()\r\n        if(response.status === 400){\r\n            data.message.map(err => {\r\n                enqueueSnackbar(err, { variant: \"error\" })\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h6\">Регистрация на FamulyPizza</Typography>\r\n            <TextField\r\n                value={registerForm.nicname}\r\n                onChange={changeForm}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                label=\"Никнейм\"\r\n                name=\"nicname\"\r\n            />\r\n            <TextField\r\n                value={registerForm.email}\r\n                onChange={changeForm}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                label=\"Почта\"\r\n                name=\"email\"\r\n            />\r\n            <TextField\r\n                value={registerForm.password}\r\n                onChange={changeForm}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Пароль\"\r\n                type=\"password\"\r\n            />\r\n            <TextField\r\n                value={registerForm.repeatPassword}\r\n                onChange={changeForm}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"repeatPassword\"\r\n                label=\"Повторите пароль\"\r\n                type=\"password\"\r\n            />\r\n            <Button\r\n                onClick={register}\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                Зарегестрироваться\r\n            </Button>\r\n            <Grid container className={style.modalFooter}>\r\n                <Grid item xs />\r\n                <Grid item>\r\n                    <Typography className={style.customLink} variant=\"inherit\" onClick={goLogin}>\r\n                        Вы имеете аккаунт? Войдите\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterPage\r\n"]},"metadata":{},"sourceType":"module"}