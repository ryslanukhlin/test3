{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Button, Container, TextField, Typography } from \"@material-ui/core\";\nimport style from \"../style/order.module.scss\";\nimport InputMask from \"react-input-mask\";\nimport getConfig from 'next/config';\nimport { useTypedSelector } from \"../hooks/useTypeSelector\";\nimport { useSnackbar } from 'notistack';\nimport { useAction } from \"../hooks/useAction\";\nReact.useLayoutEffect = React.useEffect;\nconst {\n  publicRuntimeConfig\n} = getConfig();\n\nconst Order = () => {\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    clearBasket\n  } = useAction();\n  const {\n    allPrice,\n    basketPizza\n  } = useTypedSelector(state => state.basketReducer);\n  const [formOrder, setOrderForm] = React.useState({\n    name: '',\n    adress: '',\n    tell: '',\n    optionst: ''\n  });\n\n  const formChange = e => {\n    setOrderForm(_objectSpread(_objectSpread({}, formOrder), {}, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const addOrder = async () => {\n    if (basketPizza.length === 0) return enqueueSnackbar(\"basket null\", {\n      variant: \"error\"\n    });\n    const productParams = basketPizza.map(item => {\n      return {\n        productId: item._id,\n        count: item.count\n      };\n    });\n    const response = await fetch(publicRuntimeConfig.backendUri + \"/order\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(_objectSpread(_objectSpread({}, formOrder), {}, {\n        price: allPrice,\n        product: productParams\n      }))\n    });\n\n    if (response.status === 201) {\n      enqueueSnackbar('is Add Order', {\n        variant: \"success\"\n      });\n      clearBasket();\n      let clearForm = formOrder;\n\n      for (let orderItem in formOrder) {\n        clearForm[orderItem] = \"\";\n      }\n\n      setOrderForm(_objectSpread({}, clearForm));\n    }\n\n    const data = await response.json();\n\n    if (response.status === 400) {\n      data.message.map(err => {\n        enqueueSnackbar(err, {\n          variant: \"error\"\n        });\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsx(Typography, {\n      className: style.orderTitle,\n      variant: \"h2\",\n      children: \"\\u0424\\u043E\\u0440\\u043C\\u0430 \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430\"\n    }), /*#__PURE__*/_jsx(TextField, {\n      className: style.orderInput,\n      value: formOrder.name,\n      onChange: formChange,\n      name: \"name\",\n      fullWidth: true,\n      label: \"\\u0412\\u0430\\u0448\\u0435 \\u0438\\u043C\\u044F\",\n      variant: \"outlined\"\n    }), /*#__PURE__*/_jsx(TextField, {\n      className: style.orderInput,\n      value: formOrder.adress,\n      onChange: formChange,\n      name: \"adress\",\n      fullWidth: true,\n      label: \"\\u0410\\u0434\\u0440\\u0435\\u0441\\u0441\",\n      variant: \"outlined\"\n    }), /*#__PURE__*/_jsx(InputMask, {\n      mask: \"+7(999) 9999 99-99\",\n      name: \"tell\",\n      value: formOrder.tell,\n      onChange: formChange,\n      children: /*#__PURE__*/_jsx(TextField, {\n        label: \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\",\n        fullWidth: true,\n        variant: \"outlined\",\n        type: \"tell\"\n      })\n    }), /*#__PURE__*/_jsx(TextField, {\n      className: style.orderInput,\n      value: formOrder.optionst,\n      onChange: formChange,\n      name: \"optionst\",\n      fullWidth: true,\n      multiline: true,\n      rows: 4,\n      label: \"\\u041E\\u043F\\u0446\\u0438\\u0438\",\n      variant: \"outlined\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: style.actions,\n      children: /*#__PURE__*/_jsx(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: addOrder,\n        children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      })\n    })]\n  });\n};\n\nexport default Order;","map":null,"metadata":{},"sourceType":"module"}